
<style>
    .main-view{
        position: absolute;
    }

</style>


<div class="main-view">


<script>

var mainView;
var interfaceImg;
var assetsPath = '/experiment/2/';

var camera, scene, renderer;


var friction = .02;
var theta = 45;
var planes = [];



var mouseX = 0, mouseY = 0;

var windowHalfX = window.innerWidth / 2;
var windowHalfY = window.innerHeight / 2;




init();
animate();

function newpos(x, y, z) {

    return new THREE.Vector3(x, y, z);

}


function createPlane(url, w, h, pos, blend) {


    var geometry = new THREE.PlaneGeometry(w, h);

    map = THREE.ImageUtils.loadTexture(assetsPath + url);
    map.minFilter = map.magFilter = THREE.LinearFilter;
    map.anisotropy = 4;



    this.plane = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({opacity:1, depthTest: true, map: map, transparent: true, blending: (blend)? THREE.AdditiveBlending : THREE.NormalBlending}));

    this.plane.position.x = pos.x;
    this.plane.position.y = pos.y;
    this.plane.position.z = pos.z;

    scene.add(this.plane);

}






function init() {


    mainView = $('.main-view');
    interfaceImg = $('#interface-img');

    camera = new THREE.PerspectiveCamera(35, interfaceImg.width() / interfaceImg.height(), 1, 10000);
    camera.position.y = 2000;

    scene = new THREE.Scene();


    createPlane('3d2.png', 508, 359, {x:0,y:-100,z:100} );

    createPlane('red2.png', 642, 434, {x:0,y:50,z:-50} );

    createPlane('red1.png', 471, 252, {x:-100,y:0,z:0} );

    createPlane('screen2.png', 383, 206, {x:0,y:0,z:50} );

    createPlane('3d1.png', 351, 122, {x:-100,y:0,z:250} );

    createPlane('screen1.png', 486, 311, {x:-100,y:50,z:350} );

    createPlane('white1.png', 859, 595, {x:-50,y:50,z:25},'add' );

    createPlane('red_spectre1.png', 859, 595, {x:-150,y:100,z:300},'add' );

    createPlane('red_spectre2.png', 859, 595, {x:150,y:-100,z:200},'add' );



    plane = new THREE.Mesh(new THREE.PlaneGeometry(1000, 1000, 20, 20), new THREE.MeshBasicMaterial({ color:0x154492, opacity:.2, depthTest: false, linewidth:1, transparent:true, wireframe:true, blending:THREE.AdditiveBlending}));
    plane.rotation.x = -Math.PI / 2;
    plane.position.y = -250;
    scene.add(plane);



    renderer = new THREE.WebGLRenderer({ antialias:true, preserveDrawingBuffer:true});

    renderer.setSize(interfaceImg.width(), interfaceImg.height());

    mainView.append(renderer.domElement);



    camera.position.x = 1400 * Math.sin(theta * Math.PI / 360);
    camera.position.z = 1400 * Math.cos(theta * Math.PI / 360);

    camera.lookAt(scene.position);

    document.addEventListener( 'mousemove', onDocumentMouseMove, false );
    window.addEventListener( 'resize', onWindowResize, false );

    function onDocumentMouseMove(event) {

        mouseX = ( event.clientX - windowHalfX );
        mouseY = ( event.clientY - windowHalfY );

    }

    function onWindowResize() {

        camera.aspect = interfaceImg.width() / interfaceImg.height();
        camera.updateProjectionMatrix();

        renderer.setSize( interfaceImg.width(), interfaceImg.height() );

    }


}



function animate() {

    requestAnimationFrame(animate);

//    directionalLight.position = camera.position;


    for (var i = 0; i < planes.length; i++) {
        var obj = planes[i];
        obj.update();

    }

    render();


}

function render() {

    if(camera.position.y < 200) friction = .2;

    camera.position.x -= ( mouseX/2 + camera.position.x ) * friction;
    camera.position.y -= ( - mouseY/2 + camera.position.y ) * friction;
//
    camera.lookAt( scene.position );



    renderer.render(scene, camera);


}

</script>

</div>